-- =============================================
-- Create Subscription Plans table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinSubscriptionPlans]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[FinSubscriptionPlans](
        [PlanID] [int] IDENTITY(1,1) NOT NULL,
        [PlanName] [nvarchar](100) NOT NULL,
        [PlanType] [nvarchar](50) NOT NULL, -- 'ServiceProvider', 'User', 'Both'
        [Description] [nvarchar](500) NULL,
        [Amount] [decimal](10, 2) NOT NULL,
        [Currency] [nvarchar](3) DEFAULT ('EUR'),
        [DurationMonths] [int] NOT NULL DEFAULT (12),
        [IsActive] [bit] NOT NULL DEFAULT (1),
        [SortOrder] [int] DEFAULT (0),
        [CreatedDate] [datetime] NOT NULL DEFAULT (GETDATE()),
        [CreatedByUserID] [int] NULL,
        [LastModifiedDate] [datetime] NULL,
        [LastModifiedByUserID] [int] NULL,
        CONSTRAINT [PK_FinSubscriptionPlans] PRIMARY KEY CLUSTERED ([PlanID] ASC)
    )
END
GO

-- =============================================
-- Create Payments table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinPayments]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[FinPayments](
        [PaymentID] [int] IDENTITY(1,1) NOT NULL,
        [UserID] [int] NOT NULL,
        [PaymentType] [nvarchar](50) NOT NULL, -- 'ServiceProvider', 'ProjectSubmitter', 'Other'
        [PlanID] [int] NULL,
        -- Payment Details
        [Amount] [decimal](10, 2) NOT NULL,
        [DiscountAmount] [decimal](10, 2) NOT NULL DEFAULT (0),
        [Currency] [nvarchar](3) DEFAULT ('EUR'),
        [PaymentDate] [datetime] NOT NULL,
        [PaymentMethod] [nvarchar](50) NULL, -- 'BankTransfer', 'Cash', 'Cheque', 'Online'
        [ReferenceNumber] [nvarchar](100) NULL,
        -- Subscription Period
        [SubscriptionStartDate] [datetime] NULL,
        [SubscriptionEndDate] [datetime] NULL,
        -- Status
        [Status] [nvarchar](20) NOT NULL DEFAULT ('Active'), -- 'Active', 'Expired', 'Cancelled', 'Pending'
        -- Invoice
        [InvoiceNumber] [nvarchar](50) NULL,
        [InvoiceFileName] [nvarchar](255) NULL,
        [InvoiceFilePath] [nvarchar](500) NULL,
        -- Metadata
        [PortalID] [int] NOT NULL,
        [Notes] [nvarchar](MAX) NULL,
        [CreatedDate] [datetime] NOT NULL DEFAULT (GETDATE()),
        [CreatedByUserID] [int] NOT NULL,
        [LastModifiedDate] [datetime] NULL,
        [LastModifiedByUserID] [int] NULL,
        CONSTRAINT [PK_FinPayments] PRIMARY KEY CLUSTERED ([PaymentID] ASC),
        CONSTRAINT [FK_FinPayments_Plans] FOREIGN KEY([PlanID]) REFERENCES [dbo].[FinSubscriptionPlans] ([PlanID])
    )
END
GO

-- =============================================
-- Add DiscountAmount column if it doesn't exist
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[FinPayments]') AND name = 'DiscountAmount')
BEGIN
    ALTER TABLE [dbo].[FinPayments] ADD [DiscountAmount] [decimal](10, 2) NOT NULL DEFAULT (0)
END
GO

-- =============================================
-- Service Provider Actions/Notes Table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinServiceProviderActions]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[FinServiceProviderActions](
        [ActionID] [int] IDENTITY(1,1) NOT NULL,
        [ServiceProviderUserID] [int] NOT NULL,
        [ActionType] [nvarchar](50) NOT NULL, -- 'Note', 'Call', 'Email', 'Meeting', 'Task', 'StatusChange', 'Other'
        [ActionTitle] [nvarchar](200) NOT NULL,
        [ActionDescription] [nvarchar](MAX) NULL,
        [ActionDate] [datetime] NOT NULL,
        [CreatedByUserID] [int] NOT NULL,
        [CreatedDate] [datetime] NOT NULL DEFAULT (GETDATE()),
        [PortalID] [int] NOT NULL,
        [IsPrivate] [bit] NOT NULL DEFAULT (0), -- Only visible to creator
        [Priority] [nvarchar](20) NULL, -- 'Low', 'Medium', 'High', 'Urgent'
        CONSTRAINT [PK_FinServiceProviderActions] PRIMARY KEY CLUSTERED ([ActionID] ASC),
        CONSTRAINT [FK_FinServiceProviderActions_ServiceProvider] FOREIGN KEY([ServiceProviderUserID]) REFERENCES [dbo].[Users] ([UserID]),
        CONSTRAINT [FK_FinServiceProviderActions_CreatedBy] FOREIGN KEY([CreatedByUserID]) REFERENCES [dbo].[Users] ([UserID])
    )
END
GO

-- =============================================
-- Service Provider Ratings Table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinServiceProviderRatings]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[FinServiceProviderRatings](
        [RatingID] [int] IDENTITY(1,1) NOT NULL,
        [ServiceProviderUserID] [int] NOT NULL,
        [Rating] [int] NOT NULL, -- 1-5 stars
        [RatingCategory] [nvarchar](50) NOT NULL, -- 'Overall', 'Communication', 'Quality', 'Reliability', 'Professionalism'
        [Comments] [nvarchar](MAX) NULL,
        [RatedByUserID] [int] NOT NULL,
        [RatedDate] [datetime] NOT NULL DEFAULT (GETDATE()),
        [PortalID] [int] NOT NULL,
        CONSTRAINT [PK_FinServiceProviderRatings] PRIMARY KEY CLUSTERED ([RatingID] ASC),
        CONSTRAINT [FK_FinServiceProviderRatings_ServiceProvider] FOREIGN KEY([ServiceProviderUserID]) REFERENCES [dbo].[Users] ([UserID]),
        CONSTRAINT [FK_FinServiceProviderRatings_RatedBy] FOREIGN KEY([RatedByUserID]) REFERENCES [dbo].[Users] ([UserID]),
        CONSTRAINT [CK_FinServiceProviderRatings_Rating] CHECK ([Rating] >= 1 AND [Rating] <= 5)
    )
END
GO

-- =============================================
-- Service Provider Tasks Table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinServiceProviderTasks]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[FinServiceProviderTasks](
        [TaskID] [int] IDENTITY(1,1) NOT NULL,
        [ServiceProviderUserID] [int] NOT NULL,
        [TaskTitle] [nvarchar](200) NOT NULL,
        [TaskDescription] [nvarchar](MAX) NULL,
        [AssignedByUserID] [int] NOT NULL,
        [AssignedToUserID] [int] NOT NULL,
        [DueDate] [datetime] NULL,
        [Status] [nvarchar](20) NOT NULL DEFAULT ('Pending'), -- 'Pending', 'InProgress', 'Completed', 'Cancelled'
        [Priority] [nvarchar](20) NOT NULL DEFAULT ('Medium'), -- 'Low', 'Medium', 'High', 'Urgent'
        [CreatedDate] [datetime] NOT NULL DEFAULT (GETDATE()),
        [CompletedDate] [datetime] NULL,
        [PortalID] [int] NOT NULL,
        CONSTRAINT [PK_FinServiceProviderTasks] PRIMARY KEY CLUSTERED ([TaskID] ASC),
        CONSTRAINT [FK_FinServiceProviderTasks_ServiceProvider] FOREIGN KEY([ServiceProviderUserID]) REFERENCES [dbo].[Users] ([UserID]),
        CONSTRAINT [FK_FinServiceProviderTasks_AssignedBy] FOREIGN KEY([AssignedByUserID]) REFERENCES [dbo].[Users] ([UserID]),
        CONSTRAINT [FK_FinServiceProviderTasks_AssignedTo] FOREIGN KEY([AssignedToUserID]) REFERENCES [dbo].[Users] ([UserID])
    )
END
GO

-- =============================================
-- Drop and recreate the main stored procedure
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinHubAddOns_GetServiceProviderUsers')
    DROP PROCEDURE [dbo].[FinHubAddOns_GetServiceProviderUsers]
GO

CREATE PROCEDURE [dbo].[FinHubAddOns_GetServiceProviderUsers]
    @PortalID int
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Check if payment tables exist
    DECLARE @PaymentsTableExists BIT = 0
    DECLARE @PlansTableExists BIT = 0
    
    IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinPayments]') AND type in (N'U'))
        SET @PaymentsTableExists = 1
        
    IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinSubscriptionPlans]') AND type in (N'U'))
        SET @PlansTableExists = 1
    
    SELECT DISTINCT 
        -- Basic User Info
        u.UserID,
        u.Username,
        u.FirstName,
        u.LastName,
        u.Email,
        u.DisplayName,
        
        -- Role Information
        ur.EffectiveDate AS RoleStartDate,
        ur.ExpiryDate AS RoleExpirationDate,
        ur.IsOwner AS IsRoleOwner,
        
        -- Account Status & Dates
        u.CreatedOnDate AS AccountCreated,
        u.LastModifiedOnDate AS AccountLastModified,
        up.CreatedDate AS PortalJoinDate,
        up.Authorised AS IsAuthorized,
        u.IsSuperUser,
        -- Check if user is deleted (either in Users table or UserPortals table)
        CASE 
            WHEN u.IsDeleted = 1 OR up.IsDeleted = 1 THEN 1
            ELSE 0
        END AS IsDeleted,
        
        -- Address Information
        (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
            (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Street' AND PortalID = @PortalID)) AS Street,
        (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
            (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'City' AND PortalID = @PortalID)) AS City,
        (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
            (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Region' AND PortalID = @PortalID)) AS State_Region,
        (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
            (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'PostalCode' AND PortalID = @PortalID)) AS PostalCode,
        
        -- Country - Handle both text and ID references
        CASE 
            WHEN ISNUMERIC((SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
                (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Country' AND PortalID = @PortalID))) = 1
            THEN (SELECT Text FROM Lists WHERE EntryID = 
                CAST((SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
                    (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Country' AND PortalID = @PortalID)) AS INT))
            ELSE (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
                (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Country' AND PortalID = @PortalID))
        END AS Country,
        
        -- Contact Info
        (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
            (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Telephone' AND PortalID = @PortalID)) AS Phone,
        (SELECT PropertyValue FROM UserProfile WHERE UserID = u.UserID AND PropertyDefinitionID = 
            (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Cell' AND PortalID = @PortalID)) AS Mobile,
        
        -- Calculate days in role
        DATEDIFF(day, ur.EffectiveDate, GETDATE()) AS DaysInRole,
        
        -- Other Roles
        STUFF((SELECT ', ' + r2.RoleName
               FROM UserRoles ur2 
               INNER JOIN Roles r2 ON ur2.RoleID = r2.RoleID
               WHERE ur2.UserID = u.UserID 
               AND r2.PortalID = @PortalID
               AND r2.RoleName != 'Service Provider'
               AND (ur2.ExpiryDate IS NULL OR ur2.ExpiryDate > GETDATE())
               FOR XML PATH('')), 1, 2, '') AS OtherRoles,
               
        -- Payment Status - only check if table exists
        CASE 
            WHEN @PaymentsTableExists = 1 AND EXISTS (
                SELECT 1 FROM FinPayments p 
                WHERE p.UserID = u.UserID 
                AND p.PaymentType = 'ServiceProvider'
                AND p.Status = 'Active' 
                AND p.SubscriptionEndDate >= GETDATE()
                AND p.PortalID = @PortalID
            ) THEN 'Paid'
            ELSE 'Unpaid'
        END AS PaymentStatus,
        
        -- Latest Payment Info - return NULL if table doesn't exist
        CASE WHEN @PaymentsTableExists = 1 THEN
            (SELECT TOP 1 p.SubscriptionEndDate 
             FROM FinPayments p 
             WHERE p.UserID = u.UserID 
             AND p.PaymentType = 'ServiceProvider'
             AND p.Status = 'Active'
             AND p.PortalID = @PortalID
             ORDER BY p.SubscriptionEndDate DESC)
        ELSE NULL 
        END AS SubscriptionEndDate,
         
        CASE WHEN @PaymentsTableExists = 1 AND @PlansTableExists = 1 THEN
            (SELECT TOP 1 sp.PlanName 
             FROM FinPayments p
             INNER JOIN FinSubscriptionPlans sp ON p.PlanID = sp.PlanID
             WHERE p.UserID = u.UserID 
             AND p.PaymentType = 'ServiceProvider'
             AND p.Status = 'Active'
             AND p.PortalID = @PortalID
             ORDER BY p.SubscriptionEndDate DESC)
        ELSE NULL
        END AS CurrentPlan,
        
        -- Average Rating
        ISNULL((SELECT AVG(CAST(Rating AS FLOAT)) 
                FROM FinServiceProviderRatings 
                WHERE ServiceProviderUserID = u.UserID 
                AND PortalID = @PortalID), 0) AS AverageRating
         
    FROM Users u
        INNER JOIN UserRoles ur ON u.UserID = ur.UserID
        INNER JOIN Roles r ON ur.RoleID = r.RoleID
        INNER JOIN UserPortals up ON u.UserID = up.UserID
    WHERE r.RoleName = 'Service Provider'
        AND r.PortalID = @PortalID
        AND up.PortalID = @PortalID
        AND ur.EffectiveDate <= GETDATE()
        -- REMOVED: AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETDATE())
        -- Now shows ALL users with Service Provider role, including expired
    ORDER BY u.Username
END
GO

-- =============================================
-- Add check constraint for valid payment statuses
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE name = 'CK_FinPayments_Status')
BEGIN
    ALTER TABLE FinPayments
    ADD CONSTRAINT CK_FinPayments_Status 
    CHECK (Status IN ('Active', 'Expired', 'Cancelled', 'Refunded', 'Pending', 'Completed'))
END
GO

-- =============================================
-- Create stored procedure for getting subscription plans
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinPayments_GetSubscriptionPlans')
    DROP PROCEDURE [dbo].[FinPayments_GetSubscriptionPlans]
GO

CREATE PROCEDURE [dbo].[FinPayments_GetSubscriptionPlans]
    @PlanType nvarchar(50) = NULL
AS
BEGIN
    SELECT 
        PlanID,
        PlanName,
        PlanType,
        Description,
        Amount,
        Currency,
        DurationMonths,
        IsActive,
        SortOrder
    FROM FinSubscriptionPlans
    WHERE IsActive = 1
    AND (@PlanType IS NULL OR PlanType = @PlanType OR PlanType = 'Both')
    ORDER BY SortOrder, PlanName
END
GO

-- =============================================
-- Insert default subscription plans
-- =============================================
IF NOT EXISTS (SELECT * FROM FinSubscriptionPlans)
BEGIN
    INSERT INTO FinSubscriptionPlans (PlanName, PlanType, Description, Amount, Currency, DurationMonths, SortOrder)
    VALUES 
    ('Small Plan', 'ServiceProvider', '< 3 Employees Per Annum', 2000.00, 'EUR', 12, 1),
    ('Standard Plan', 'ServiceProvider', '< 8 Employees Per Annum', 2500.00, 'EUR', 6, 2),
    ('Large Plan', 'ServiceProvider', '< 30 Employees', 4000.00, 'EUR', 12, 3),
    ('Enterprise Plan', 'ServiceProvider', '< 300 Employees', 6000.00, 'EUR', 1, 4)
END
GO

-- =============================================
-- Create stored procedure for payment statistics
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinPayments_GetPaymentStatistics')
    DROP PROCEDURE [dbo].[FinPayments_GetPaymentStatistics]
GO

CREATE PROCEDURE [dbo].[FinPayments_GetPaymentStatistics]
    @PortalID int,
    @PaymentType nvarchar(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Check if payment table exists
    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FinPayments]') AND type in (N'U'))
    BEGIN
        -- Return empty statistics if table doesn't exist
        SELECT 
            0 as TotalPayments,
            0 as TotalRevenue,
            0 as TotalDiscounts,
            0 as TotalNetRevenue,
            0 as PaymentsThisMonth,
            0 as RevenueThisMonth,
            0 as DiscountsThisMonth,
            0 as NetRevenueThisMonth,
            0 as PaymentsThisYear,
            0 as RevenueThisYear,
            0 as DiscountsThisYear,
            0 as NetRevenueThisYear,
            0 as ActiveSubscriptions,
            0 as ExpiredSubscriptions,
            0 as ExpiringThisMonth
        RETURN
    END
    
    DECLARE @Today datetime = CAST(GETDATE() AS DATE)
    DECLARE @ThisMonthStart datetime = DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)
    DECLARE @ThisYearStart datetime = DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0)
    
    SELECT 
        -- Total payments
        COUNT(*) as TotalPayments,
        ISNULL(SUM(Amount), 0) as TotalRevenue,
        ISNULL(SUM(DiscountAmount), 0) as TotalDiscounts,
        ISNULL(SUM(Amount - ISNULL(DiscountAmount, 0)), 0) as TotalNetRevenue,
        
        -- This month
        COUNT(CASE WHEN PaymentDate >= @ThisMonthStart THEN 1 END) as PaymentsThisMonth,
        ISNULL(SUM(CASE WHEN PaymentDate >= @ThisMonthStart THEN Amount END), 0) as RevenueThisMonth,
        ISNULL(SUM(CASE WHEN PaymentDate >= @ThisMonthStart THEN DiscountAmount END), 0) as DiscountsThisMonth,
        ISNULL(SUM(CASE WHEN PaymentDate >= @ThisMonthStart THEN Amount - ISNULL(DiscountAmount, 0) END), 0) as NetRevenueThisMonth,
        
        -- This year
        COUNT(CASE WHEN PaymentDate >= @ThisYearStart THEN 1 END) as PaymentsThisYear,
        ISNULL(SUM(CASE WHEN PaymentDate >= @ThisYearStart THEN Amount END), 0) as RevenueThisYear,
        ISNULL(SUM(CASE WHEN PaymentDate >= @ThisYearStart THEN DiscountAmount END), 0) as DiscountsThisYear,
        ISNULL(SUM(CASE WHEN PaymentDate >= @ThisYearStart THEN Amount - ISNULL(DiscountAmount, 0) END), 0) as NetRevenueThisYear,
        
        -- Active subscriptions
        COUNT(CASE WHEN Status = 'Active' AND SubscriptionEndDate >= @Today THEN 1 END) as ActiveSubscriptions,
        COUNT(CASE WHEN Status = 'Active' AND SubscriptionEndDate < @Today THEN 1 END) as ExpiredSubscriptions,
        COUNT(CASE WHEN Status = 'Active' AND SubscriptionEndDate BETWEEN @Today AND DATEADD(day, 30, @Today) THEN 1 END) as ExpiringThisMonth
        
    FROM FinPayments
    WHERE PortalID = @PortalID
    AND (@PaymentType IS NULL OR PaymentType = @PaymentType)
END
GO

-- =============================================
-- Stored Procedure: Get Service Provider Profile Stats
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinServiceProvider_GetProfileStats')
    DROP PROCEDURE [dbo].[FinServiceProvider_GetProfileStats]
GO

CREATE PROCEDURE [dbo].[FinServiceProvider_GetProfileStats]
    @ServiceProviderUserID int,
    @PortalID int
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Basic stats
    SELECT 
        -- Offers
        COUNT(DISTINCT o.OfferID) as TotalOffers,
        COUNT(DISTINCT CASE WHEN o.Status = 'Accepted' THEN o.OfferID END) as AcceptedOffers,
        COUNT(DISTINCT CASE WHEN o.Status = 'Rejected' THEN o.OfferID END) as RejectedOffers,
        COUNT(DISTINCT CASE WHEN o.Status = 'Pending' THEN o.OfferID END) as PendingOffers,
        
        -- Projects
        COUNT(DISTINCT p.ProjectID) as TotalProjectsBidOn,
        COUNT(DISTINCT CASE WHEN o.Status = 'Accepted' THEN p.ProjectID END) as ProjectsWon,
        
        -- Financial
        ISNULL(SUM(CASE WHEN o.Status = 'Accepted' THEN o.Price ELSE 0 END), 0) as TotalRevenue,
        ISNULL(AVG(CASE WHEN o.Status = 'Accepted' THEN o.Price ELSE NULL END), 0) as AverageProjectValue,
        
        -- Success Rate
        CASE 
            WHEN COUNT(o.OfferID) > 0 
            THEN CAST(COUNT(CASE WHEN o.Status = 'Accepted' THEN 1 END) AS FLOAT) / COUNT(o.OfferID) * 100
            ELSE 0 
        END as SuccessRate,
        
        -- Average Rating
        ISNULL((SELECT AVG(CAST(Rating AS FLOAT)) FROM FinServiceProviderRatings 
         WHERE ServiceProviderUserID = @ServiceProviderUserID AND PortalID = @PortalID), 0) as AverageRating
         
    FROM FinOffers o
    LEFT JOIN FinProjects p ON o.ProjectID = p.ProjectID
    WHERE o.UserID = @ServiceProviderUserID 
    AND o.PortalID = @PortalID
END
GO

-- =============================================
-- Stored Procedure: Get Service Provider Actions
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinServiceProvider_GetActions')
    DROP PROCEDURE [dbo].[FinServiceProvider_GetActions]
GO

CREATE PROCEDURE [dbo].[FinServiceProvider_GetActions]
    @ServiceProviderUserID int,
    @PortalID int,
    @CurrentUserID int
AS
BEGIN
    SELECT 
        a.ActionID,
        a.ActionType,
        a.ActionTitle,
        a.ActionDescription,
        a.ActionDate,
        a.Priority,
        a.IsPrivate,
        a.CreatedDate,
        u.DisplayName as CreatedByName
    FROM FinServiceProviderActions a
    INNER JOIN Users u ON a.CreatedByUserID = u.UserID
    WHERE a.ServiceProviderUserID = @ServiceProviderUserID
    AND a.PortalID = @PortalID
    AND (a.IsPrivate = 0 OR a.CreatedByUserID = @CurrentUserID)
    ORDER BY a.ActionDate DESC, a.CreatedDate DESC
END
GO

-- =============================================
-- Stored Procedure: Get Service Provider Tasks
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinServiceProvider_GetTasks')
    DROP PROCEDURE [dbo].[FinServiceProvider_GetTasks]
GO

CREATE PROCEDURE [dbo].[FinServiceProvider_GetTasks]
    @ServiceProviderUserID int,
    @PortalID int
AS
BEGIN
    SELECT 
        t.TaskID,
        t.TaskTitle,
        t.TaskDescription,
        t.DueDate,
        t.Status,
        t.Priority,
        t.CreatedDate,
        t.CompletedDate,
        assignedBy.DisplayName as AssignedByName,
        assignedTo.DisplayName as AssignedToName
    FROM FinServiceProviderTasks t
    INNER JOIN Users assignedBy ON t.AssignedByUserID = assignedBy.UserID
    INNER JOIN Users assignedTo ON t.AssignedToUserID = assignedTo.UserID
    WHERE t.ServiceProviderUserID = @ServiceProviderUserID
    AND t.PortalID = @PortalID
    ORDER BY 
        CASE t.Status 
            WHEN 'Pending' THEN 1
            WHEN 'InProgress' THEN 2
            WHEN 'Completed' THEN 3
            WHEN 'Cancelled' THEN 4
        END,
        t.DueDate ASC
END
GO

-- =============================================
-- Stored Procedure: Get Service Provider Ratings
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinServiceProvider_GetRatings')
    DROP PROCEDURE [dbo].[FinServiceProvider_GetRatings]
GO

CREATE PROCEDURE [dbo].[FinServiceProvider_GetRatings]
    @ServiceProviderUserID int,
    @PortalID int
AS
BEGIN
    SELECT 
        r.RatingID,
        r.Rating,
        r.RatingCategory,
        r.Comments,
        r.RatedDate,
        u.DisplayName as RatedByName
    FROM FinServiceProviderRatings r
    INNER JOIN Users u ON r.RatedByUserID = u.UserID
    WHERE r.ServiceProviderUserID = @ServiceProviderUserID
    AND r.PortalID = @PortalID
    ORDER BY r.RatedDate DESC
END
GO

-- =============================================
-- Stored Procedure: Get Service Provider Projects
-- =============================================
IF EXISTS (SELECT * FROM sys.procedures WHERE name = N'FinServiceProvider_GetProjects')
    DROP PROCEDURE [dbo].[FinServiceProvider_GetProjects]
GO

CREATE PROCEDURE [dbo].[FinServiceProvider_GetProjects]
    @ServiceProviderUserID int,
    @PortalID int
AS
BEGIN
    SELECT 
        p.ProjectID,
        p.Title,
        p.Description,
        p.Budget,
        p.BudgetCur,
        p.DateCreated,
        o.OfferID,
        o.Price as OfferPrice,
        o.PriceCur as OfferCurrency,
        o.DateOffered,
        o.Status as OfferStatus,
        o.offeredmsg as OfferMessage
    FROM FinOffers o
    INNER JOIN FinProjects p ON o.ProjectID = p.ProjectID
    WHERE o.UserID = @ServiceProviderUserID
    AND o.PortalID = @PortalID
    ORDER BY o.DateOffered DESC
END
GO

-- =============================================
-- End of script
-- =============================================